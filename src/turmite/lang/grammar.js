// @generated from id:2ca93388742b4da7a311d26c788bbaf95002b73588b88a4b0e70319aab4bd37c

// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
function id(x) { return x[0]; }
let Lexer = undefined;
let ParserRules = [
    {"name": "spec", "symbols": ["entries"], "postprocess": ([entries]) => ({type: 'spec', entries: entries || []})},
    {"name": "entries", "symbols": ["entry"]},
    {"name": "entries", "symbols": ["entry", "newline", "entries"], "postprocess": ([head, _, tail]) => [head].concat(tail)},
    {"name": "comment$string$1", "symbols": [{"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comment$macrocall$2", "symbols": [/[^\n]/]},
    {"name": "comment$macrocall$1$ebnf$1", "symbols": ["comment$macrocall$2"]},
    {"name": "comment$macrocall$1$ebnf$1", "symbols": ["comment$macrocall$1$ebnf$1", "comment$macrocall$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment$macrocall$1", "symbols": ["comment$macrocall$1$ebnf$1"], "postprocess": ([parts]) => parts.join('')},
    {"name": "comment", "symbols": ["_", "comment$string$1", "comment$macrocall$1"], "postprocess": ([_0, _1, comment]) => ({type: 'comment', comment})},
    {"name": "entry", "symbols": ["assign"], "postprocess": d => d[0]},
    {"name": "entry", "symbols": ["rule"], "postprocess": d => d[0]},
    {"name": "entry", "symbols": ["directive"], "postprocess": d => d[0]},
    {"name": "entry", "symbols": ["comment"], "postprocess": d => d[0]},
    {"name": "directive$macrocall$2", "symbols": [/[\w]/]},
    {"name": "directive$macrocall$1$ebnf$1", "symbols": ["directive$macrocall$2"]},
    {"name": "directive$macrocall$1$ebnf$1", "symbols": ["directive$macrocall$1$ebnf$1", "directive$macrocall$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "directive$macrocall$1", "symbols": ["directive$macrocall$1$ebnf$1"], "postprocess": ([parts]) => parts.join('')},
    {"name": "directive$macrocall$4", "symbols": [/[^\n]/]},
    {"name": "directive$macrocall$3$ebnf$1", "symbols": ["directive$macrocall$4"]},
    {"name": "directive$macrocall$3$ebnf$1", "symbols": ["directive$macrocall$3$ebnf$1", "directive$macrocall$4"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "directive$macrocall$3", "symbols": ["directive$macrocall$3$ebnf$1"], "postprocess": ([parts]) => parts.join('')},
    {"name": "directive", "symbols": ["_", {"literal":"@"}, "directive$macrocall$1", "__", "directive$macrocall$3"], "postprocess": ([_0, _1, name, _2, value]) => ({type: 'directive', name, value})},
    {"name": "assign", "symbols": ["identifier", "_", {"literal":"="}, "_", "lit"], "postprocess": ([id, _1, _2, _3, value]) => ({type: 'assign', id, value})},
    {"name": "rule", "symbols": ["ant"], "postprocess": ([ant]) => ant},
    {"name": "rule$string$1", "symbols": [{"literal":"="}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "rule", "symbols": ["when", "rule$string$1", "then"], "postprocess": ([when, _1, then]) => ({type: 'rule', when, then})},
    {"name": "when", "symbols": ["expr", {"literal":","}, "expr"], "postprocess": ([state, _1, color]) => ({type: 'when', state, color})},
    {"name": "then", "symbols": ["thenState", {"literal":","}, "thenColor", {"literal":","}, "thenTurn"], "postprocess": ([state, _1, color, _3, turn]) => ({type: 'then', state, color, turn})},
    {"name": "thenMode", "symbols": [], "postprocess": () => '='},
    {"name": "thenMode", "symbols": [{"literal":"="}], "postprocess": () => '='},
    {"name": "thenMode", "symbols": [{"literal":"|"}], "postprocess": () => '|'},
    {"name": "thenNoop", "symbols": ["_", {"literal":"_"}, "_"], "postprocess": () => ({type: 'thenVal', mode: '_'})},
    {"name": "thenState", "symbols": ["thenNoop"], "postprocess": d => d[0]},
    {"name": "thenState", "symbols": ["_", "thenMode", "sum", "_"], "postprocess": ([_0, mode, value]) => ({type: 'thenVal', mode, value})},
    {"name": "thenColor", "symbols": ["thenNoop"], "postprocess": d => d[0]},
    {"name": "thenColor", "symbols": ["_", "thenMode", "sum", "_"], "postprocess": ([_0, mode, value]) => ({type: 'thenVal', mode, value})},
    {"name": "thenTurn", "symbols": ["thenNoop"], "postprocess": d => d[0]},
    {"name": "thenTurn", "symbols": ["_", "thenMode", "sum", "_"], "postprocess": ([_0, mode, value]) => ({type: 'thenVal', mode, value})},
    {"name": "thenTurn", "symbols": ["_", "thenMode", "turnExpr", "_"], "postprocess": ([_0, mode, value]) => ({type: 'thenVal', mode, value})},
    {"name": "turnExpr", "symbols": ["turn"], "postprocess": ([name]) => ({type: 'turn', names: [name]})},
    {"name": "turnExpr", "symbols": ["turnExpr", {"literal":"|"}, "turnExpr"], "postprocess": ([a, _1, b]) => ({type: 'turn', names: a.names.concat(b.names)})},
    {"name": "expr", "symbols": ["_", "sum", "_"], "postprocess": d => d[1]},
    {"name": "sumop", "symbols": ["_", {"literal":"+"}, "_"], "postprocess": d => d[1]},
    {"name": "sumop", "symbols": ["_", {"literal":"-"}, "_"], "postprocess": d => d[1]},
    {"name": "mulop", "symbols": ["_", {"literal":"*"}, "_"], "postprocess": d => d[1]},
    {"name": "mulop", "symbols": ["_", {"literal":"/"}, "_"], "postprocess": d => d[1]},
    {"name": "mulop", "symbols": ["_", {"literal":"%"}, "_"], "postprocess": d => d[1]},
    {"name": "sum", "symbols": ["sum", "sumop", "mul"], "postprocess": ([arg1, op, arg2]) => ({type: 'expr', op, arg1, arg2})},
    {"name": "sum", "symbols": ["mul"], "postprocess": d => d[0]},
    {"name": "mul", "symbols": ["mul", "mulop", "fac"], "postprocess": ([arg1, op, arg2]) => ({type: 'expr', op, arg1, arg2})},
    {"name": "mul", "symbols": ["fac"], "postprocess": d => d[0]},
    {"name": "fac", "symbols": [{"literal":"("}, "expr", {"literal":")"}], "postprocess": d => d[1]},
    {"name": "fac", "symbols": ["lit"], "postprocess": d => d[0]},
    {"name": "fac", "symbols": ["member"], "postprocess": d => d[0]},
    {"name": "fac", "symbols": ["symbol"], "postprocess": d => d[0]},
    {"name": "fac", "symbols": ["identifier"], "postprocess": d => d[0]},
    {"name": "ant$string$1", "symbols": [{"literal":"a"}, {"literal":"n"}, {"literal":"t"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ant", "symbols": ["_", "ant$string$1", "countTurns", {"literal":")"}, "_"], "postprocess": ([_0, _1, turns]) => ({type: 'ant', turns})},
    {"name": "turns$string$1", "symbols": [{"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"n"}, {"literal":"s"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turns", "symbols": ["turns$string$1", "countTurns", {"literal":")"}], "postprocess": ([_, turns]) => ({type: 'turns', turns})},
    {"name": "turn", "symbols": [{"literal":"L"}], "postprocess": () => 'RelLeft'},
    {"name": "turn", "symbols": [{"literal":"R"}], "postprocess": () => 'RelRight'},
    {"name": "turn", "symbols": [{"literal":"F"}], "postprocess": () => 'RelForward'},
    {"name": "turn", "symbols": [{"literal":"B"}], "postprocess": () => 'RelBackward'},
    {"name": "turn", "symbols": [{"literal":"P"}], "postprocess": () => 'RelDoubleLeft'},
    {"name": "turn", "symbols": [{"literal":"S"}], "postprocess": () => 'RelDoubleRight'},
    {"name": "turn", "symbols": [{"literal":"l"}], "postprocess": () => 'RelLeft'},
    {"name": "turn", "symbols": [{"literal":"r"}], "postprocess": () => 'RelRight'},
    {"name": "turn", "symbols": [{"literal":"f"}], "postprocess": () => 'RelForward'},
    {"name": "turn", "symbols": [{"literal":"b"}], "postprocess": () => 'RelBackward'},
    {"name": "turn", "symbols": [{"literal":"p"}], "postprocess": () => 'RelDoubleLeft'},
    {"name": "turn", "symbols": [{"literal":"s"}], "postprocess": () => 'RelDoubleRight'},
    {"name": "turn$string$1", "symbols": [{"literal":"N"}, {"literal":"W"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$1"], "postprocess": () => 'AbsNorthWest'},
    {"name": "turn$string$2", "symbols": [{"literal":"N"}, {"literal":"O"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$2"], "postprocess": () => 'AbsNorth'},
    {"name": "turn$string$3", "symbols": [{"literal":"N"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$3"], "postprocess": () => 'AbsNorthEast'},
    {"name": "turn$string$4", "symbols": [{"literal":"S"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$4"], "postprocess": () => 'AbsSouthEast'},
    {"name": "turn$string$5", "symbols": [{"literal":"S"}, {"literal":"O"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$5"], "postprocess": () => 'AbsSouth'},
    {"name": "turn$string$6", "symbols": [{"literal":"S"}, {"literal":"W"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$6"], "postprocess": () => 'AbsSouthWest'},
    {"name": "turn$string$7", "symbols": [{"literal":"n"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$7"], "postprocess": () => 'AbsNorthWest'},
    {"name": "turn$string$8", "symbols": [{"literal":"n"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$8"], "postprocess": () => 'AbsNorth'},
    {"name": "turn$string$9", "symbols": [{"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$9"], "postprocess": () => 'AbsNorthEast'},
    {"name": "turn$string$10", "symbols": [{"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$10"], "postprocess": () => 'AbsSouthEast'},
    {"name": "turn$string$11", "symbols": [{"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$11"], "postprocess": () => 'AbsSouth'},
    {"name": "turn$string$12", "symbols": [{"literal":"s"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "turn", "symbols": ["turn$string$12"], "postprocess": () => 'AbsSouthWest'},
    {"name": "countTurn", "symbols": ["turn"], "postprocess": ([turn]) => ({count: {type: 'number', value: 1}, turn})},
    {"name": "countTurn", "symbols": ["decint", "turn"], "postprocess": ([count, turn]) => ({count, turn})},
    {"name": "countTurns$ebnf$1", "symbols": []},
    {"name": "countTurns$ebnf$1$subexpression$1", "symbols": ["__", "countTurn"]},
    {"name": "countTurns$ebnf$1", "symbols": ["countTurns$ebnf$1", "countTurns$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "countTurns", "symbols": ["_", "countTurn", "countTurns$ebnf$1", "_"], "postprocess": ([_, first, rest=[]]) => ([first, ...rest.map(([_, next]) => next)])},
    {"name": "member$subexpression$1", "symbols": ["member"]},
    {"name": "member$subexpression$1", "symbols": ["symbol"]},
    {"name": "member$subexpression$1", "symbols": ["identifier"]},
    {"name": "member$subexpression$1", "symbols": ["lit"]},
    {"name": "member", "symbols": ["member$subexpression$1", {"literal":"["}, "expr", {"literal":"]"}], "postprocess": ([[value], _1, item]) => ({type: 'member', value, item})},
    {"name": "symbol$ebnf$1", "symbols": []},
    {"name": "symbol$ebnf$1", "symbols": ["symbol$ebnf$1", /[\w]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "symbol", "symbols": [/[a-z]/, "symbol$ebnf$1"], "postprocess": ([head, tail]) => ({type: 'symbol', name: head + tail.join('')})},
    {"name": "identifier$ebnf$1", "symbols": [/[\w]/]},
    {"name": "identifier$ebnf$1", "symbols": ["identifier$ebnf$1", /[\w]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "identifier", "symbols": [/[A-Z]/, "identifier$ebnf$1"], "postprocess": ([head, tail]) => ({type: 'identifier', name: head + tail.join('')})},
    {"name": "lit", "symbols": ["int"], "postprocess": d => d[0]},
    {"name": "lit", "symbols": ["turns"], "postprocess": d => d[0]},
    {"name": "int$string$1", "symbols": [{"literal":"0"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "int", "symbols": ["int$string$1", "hexint"], "postprocess": d => d[1]},
    {"name": "int", "symbols": ["decint"], "postprocess": d => d[0]},
    {"name": "hexint$macrocall$2", "symbols": [/[0-9a-fA-F]/]},
    {"name": "hexint$macrocall$1$ebnf$1", "symbols": ["hexint$macrocall$2"]},
    {"name": "hexint$macrocall$1$ebnf$1", "symbols": ["hexint$macrocall$1$ebnf$1", "hexint$macrocall$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "hexint$macrocall$1", "symbols": ["hexint$macrocall$1$ebnf$1"], "postprocess": ([parts]) => parts.join('')},
    {"name": "hexint", "symbols": ["hexint$macrocall$1"], "postprocess": ([num]) => ({type: 'number', value: parseInt(num, 16), base: 16})},
    {"name": "decint$macrocall$2", "symbols": [/[0-9]/]},
    {"name": "decint$macrocall$1$ebnf$1", "symbols": ["decint$macrocall$2"]},
    {"name": "decint$macrocall$1$ebnf$1", "symbols": ["decint$macrocall$1$ebnf$1", "decint$macrocall$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "decint$macrocall$1", "symbols": ["decint$macrocall$1$ebnf$1"], "postprocess": ([parts]) => parts.join('')},
    {"name": "decint", "symbols": ["decint$macrocall$1"], "postprocess": ([num]) => ({type: 'number', value: parseInt(num, 10)})},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => null},
    {"name": "__$ebnf$1", "symbols": [/[\s]/]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": () => null},
    {"name": "newline$ebnf$1", "symbols": [{"literal":"\r"}], "postprocess": id},
    {"name": "newline$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "newline", "symbols": ["newline$ebnf$1", {"literal":"\n"}], "postprocess": () => null}
];
let ParserStart = "spec";
export default { Lexer, ParserRules, ParserStart };
